# docker-compose.yml
# This file defines a service to build and run the Observable Framework tutorial container.

services:
  # Service name for this container setup
  devojs:
    # Build configuration
    build:
      # Context is the directory containing the Dockerfile and your project files.
      # Assuming the Dockerfile is in .devcontainer/ and this docker-compose.yml
      # is in the project root, the context is the project root.
      context: ..
      # Specify the path to the Dockerfile relative to the context.
      dockerfile: .devcontainer/Dockerfile

    # Assign a name to the resulting image
    image: ojsworkspace

    # Ensure init process runs for proper signal handling (good practice)
    init: true

    # Assign a specific container name (optional but helpful)
    container_name: my-ojs-playground

    # Map host port 3000 to container port 3000
    # This allows you to access the Observable Framework dev server from your host browser.
    ports:
      - "3000:3000"

    # Mount the current directory (your project root) into the container's /app directory.
    # This synchronizes your code between the host and the container.
    # Ensure permissions are handled correctly by running as the 'node' user in the Dockerfile.
    volumes:
      # Mount the local project directory into the container's /app directory (WORKDIR)
      # This is your workspace inside the Dev Container.
      - .:/app

      # Mount the Docker socket from the host to allow Docker operations inside the container (optional)
      # Only needed if you plan to run Docker commands from within the dev container.
      # - /var/run/docker.sock:/var/run/docker.sock

      # # SSH directory
      # Allows using your host SSH keys for operations within the container.
      - ~/.ssh:/home/node/.ssh

      # # Git config
      # Allows using your host Git configuration within the container.
      - ~/.gitconfig:/home/node/.gitconfig

      # VS Code server files are handled automatically by Dev Containers when using docker-compose.
      # You do NOT need to explicitly mount a volume for vscode-server here.
      # - vscode-server:/home/node/.vscode-server
      # Mount DVC credential cache directory from host to the 'node' user's home
      # # DVC credential cache directory (this makes DVC credential persistant)
      - ~/.cache/pydrive2fs:/home/node/.cache/pydrive2fs

    # Set environment variables (e.g., timezone)
    environment:
      - TZ=Etc/GMT-8 # Example: Set timezone

    # Keep the container running indefinitely after startup, waiting for user interaction.
    # This allows you to attach to the container and run commands like `pnpm dev`.
    entrypoint: sh -c "sleep infinity"

# No root-level volumes declaration needed for the mounts defined above
# because we are directly mapping host paths or relying on Dev Containers.
# The vscode-server volume declaration is removed as Dev Containers handles it.